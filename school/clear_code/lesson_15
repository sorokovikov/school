# TODO сделать тип и выкинуть валидатор
// Комментарий для того, чтобы в будущем сделать для входных аргументов отдельный тип, который будет валидировать входные аргументоы

# если не было ошибки и не установили вручную, то считаем что все ок
self._status = Status.OK
// Комментарий для того, чтобы программисты понимали логику выставления такого статуса

if rack in racks_in_location:
    # если стойка в локации - нам нужен этот сервер
    server_list.append(server)
// Комментарий для того, чтобы программисты понимали логику добавления сервера

# TODO: Нужно научиться импортировать VPU адреса
if ip_info.get("vpu"):
    continue
// Комментарий для того, чтобы доработать импорт VPU адресов

# TODO: Отрефакторить отправку уведомлений на 4 версию
// Комментарий для того, чтобы в будущем переработать отправку уведомлений после перехода на 4 версию

# игнорим ошибку, если не base64
with suppress(binascii.Error):
    decoded_info = b64decode(info).decode()
// Комментарий для того, чтобы было ясно, что специально игнорируем ошибку декодирования из base64

...
# Unhandled errors
return CustomException(value=str(exception))
// Комментарий для того, чтобы было ясно что сюда попадают все необработанные/неизвестные ошибки


# keys
SERVER_ENTITY_KEY = "server"
SETTING_KEY = "setting"
LIST_KEY = "list"
TYPE_KEY = "type"
// Комментарий, который описывает назначение этих констант

# Не отправляем данные, если нету версии релиза
if not getenv("SENTRY_RELEASE", ""):
    return
// Комментарий, описывающий логику return

# TODO: Добавить подключение к БД
super().__init__(with_db=False)
// Комментарий для того, чтобы в будущем доработать подключение к БД

# Message is disabled for increasing performance purposes
# logging.debug(f"Got message from stream {stream_name}")
// Комментарий, описывающий для чего была закомментирована строка

// int64_t нужен, т.к. в обычный int не влезает конечный результат
int64_t big_size = size;
size = big_size * 1000000 / 1024 / 1024;
// Комментарий, поясняющий для чего использовался такой тип данных
